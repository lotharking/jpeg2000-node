name: Build
on:
  push:
    branches: [ main ]

jobs:
  build:
    name: Build and Package
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y libopenjp2-7-dev build-essential

      - name: Install dependencies (macOS)
        if: runner.os == 'macOS'
        run: |
          brew update
          brew install openjpeg

      - name: Install vcpkg (Windows)
        if: runner.os == 'Windows'
        run: |
          git clone https://github.com/microsoft/vcpkg.git
          cd vcpkg
          .\bootstrap-vcpkg.bat
          .\vcpkg.exe install openjpeg:x64-windows
        shell: powershell

      - name: Compile C binary (Windows)
        if: runner.os == 'Windows'
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: x64

      - name: Create bin directory
        run: mkdir -p bin
        shell: bash

      - name: Compile C binary (Linux)
        if: runner.os == 'Linux'
        run: gcc -I/usr/include/openjpeg-2.5 core/convert.c -o bin/convert-linux -static -lopenjp2 -lm
        shell: bash

      - name: Compile C binary (macOS)
        if: runner.os == 'macOS'
        run: clang core/convert.c -o bin/convert-macos -I/opt/homebrew/include/openjpeg-2.5 -L/opt/homebrew/lib -lopenjp2 -lm
        shell: bash

      - name: Compile C binary (Windows)
        if: runner.os == 'Windows'
        run: cl /O2 /I"$env:GITHUB_WORKSPACE\vcpkg\installed\x64-windows\include" /Fe:bin\convert-win.exe core\convert.c /link /LIBPATH:"$env:GITHUB_WORKSPACE\vcpkg\installed\x64-windows\lib" openjp2.lib
        shell: powershell
      
      - name: Upload binaries (shared artifact)
        uses: actions/upload-artifact@v4
        with:
          name: convert-binaries
          path: bin/*

  release:
    name: Process Release
    runs-on: ubuntu-latest
    needs: build
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Process Release Please
      uses: googleapis/release-please-action@v4
      id: release-please
      with:
        config-file: release-please-config.json
        manifest-file: .release-please-manifest.json
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Print release outputs for debugging
      continue-on-error: true
      run: |
        echo "Release outputs:"
        echo "${{ toJson(steps.release-please.outputs) }}"

    - name: Download build artifacts
      if: ${{ steps.release-please.outputs.releases_created == 'true' }}
      uses: actions/download-artifact@v4
      with:
        name: convert-binaries
        path: lib/src/bin/

    - name: Setup Node.js for NPM Publishing
      if: ${{ steps.release-please.outputs.releases_created == 'true' }}
      uses: actions/setup-node@v4
      with:
        node-version: 20
        registry-url: 'https://registry.npmjs.org'

    - name: Enable Corepack and Setup Yarn
      run: |
        corepack enable
        corepack prepare yarn@3.6.1 --activate
        yarn --version
        
    - name: Publish to NPM
      if: ${{ steps.release-please.outputs.releases_created == 'true' }}
      run: |
        cd lib
        yarn install --immutable
        yarn build
        rm -rf src/bin/
        echo "//registry.npmjs.org/:_authToken=${NPM_AUTH_TOKEN}" > ~/.npmrc
        yarn config set npmAuthToken ${NPM_AUTH_TOKEN}
        yarn npm publish --access public
      env:
         NPM_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}